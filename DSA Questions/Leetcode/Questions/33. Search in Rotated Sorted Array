/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function (nums, target) {
  const minValIndex = findMinValIndex(nums, 0, nums.length - 1);
  if (target == nums[minValIndex]) {
    return minValIndex;
  }
    
    const index1 = binarySearch(0,minValIndex-1,target,nums);
    const index2 = binarySearch(minValIndex+1, nums.length-1, target, nums);
    return index1 !== -1 ? index1 : index2;
};

function findMinValIndex(nums, si, ei) {
  while (si <= ei) {
    let mid = Math.floor((si + ei) / 2);
    if (mid > 0 && nums[mid] < nums[mid - 1] && nums[mid] < nums[mid + 1]) {
      return mid;
    } else if (nums[mid] > nums[si] && nums[mid] > nums[ei]) {
      si = mid + 1;
    } else {
      ei = mid - 1;
    }
  }
    return si;
}

function binarySearch(si,ei,target,nums){
    while (si <= ei) {
    let mid = Math.floor((si + ei) / 2);
    if (target == nums[mid]) {
      return mid;
    } else if (target > nums[mid]) {
      si = mid+1;
    } else {
      ei = mid-1;
    }
  }
    return -1;
}
