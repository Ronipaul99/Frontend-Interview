// hme recursion use krni..hm n-1 ka result recursion se mngwa lenge...ab jo subRes aaya usko hm implement krege..
// yha hm sliding window type of approach use krege, hmne leftPointer ko 0 index pr rkh dia or rightPointer subres pr aage bdh rha jb tk leftPointer vala char 
// and rightPointer vala char equal hai toh counter++ kro..but jaise hi equal ni hai toh mtlb leftPointer vale char ka counter aa gya toh res mei hm counter and 
// leftPointer vale char ko put krege..or hmare leftPointer ko rightPointer pr point krdege kyu next iska count find krna and counter = 1, bcz rightPointer next
// iteration mei aage bdh jayega, last mei jb string khtm hoga toh last char ka counter hme for loop se bhr add krna hoga
var countAndSay = function(n) {
    if(n == 1){
            return "1";
        }
        const subRes = countAndSay(n-1);
        let res = "";
        let leftPointer = 0;
        let counter = 0;
        for(let rightPointer = 0; rightPointer < subRes.length; rightPointer++){
            if(subRes[leftPointer] == subRes[rightPointer]){
                counter++;
            }
            else{
               res += counter.toString() + subRes[leftPointer];
                leftPointer = rightPointer;
                counter = 1;
            }
        }
        res += counter.toString() + subRes.at(-1);
        return res;
};
