// function plusMinus(...args) {
//         let sum = args[0];
//         var i = 0;
//         let func = function(...args2) {
//             i++;
//             if(args2[0] === undefined) return sum;
//             sum = i % 2 === 0 ? sum - args2[0] : sum + args2[0];
//             return func;  
//         }
//         return func;
//     }
//     console.log(plusMinus(2)(3)(4)(5)(6)());


//******promise.all

// Promise.prototype.myall = function(promises) {
//   let count =0;
//   let result =[]
//   return new Promise((resolve,reject)=>{
//     promises.forEach((el,index)=>{
//       el.then(res=>{
//         result[index] = res;
          // count++;
           //if(count===promises.length) resolve(result)
//       })
//     })
//   })
// }


//****debouncing
// function debounce(fn,delay){
//   let timeOutID;
//   return function(...args){
//     if(timeOutID) clearTimeOut(timeOutID)
//     timeOutID = setTimeOut(fn(...args),delay)
//   }
// }

// debounce(callback=>{console.log("debounce")},2000))



//*****throttle

// function throttle(fn,delay){
//   let last = 0;
//   return (...args)=>{
//     let now = new Date().getTime()
//     if(now-last< delay) return
//     last = now;
//     return fn(...args)
//   }
// }

// throttle(callback=>{console.log("throttle")},2000))


//***atlassian

// class Stream {
//   constructor() {
//    this.cache = [];
//   }

//   subscribe(fn) {
//   this.cache.push(fn);
//   }

// push(val) {
// this.cache.forEach((item) => {
// item.call(this, val);
// })
// }
// }

// const stream = new Stream();
// stream.subscribe((value) => console.log(value));
// stream.subscribe((value) => console.log(value * 2));
// stream.subscribe((value) => console.log(value * 3));
// stream.push(2);

//********reduce pollyfill

// let arr = [1,2,3,4]


// Array.prototype.myReduce = function(callback,init){ 
//   this.forEach(el=>{
//     init = init !== undefined ? callback(init,el): el;
//   })
//   return init;
// }


// console.log(arr.myReduce((a,b)=> a+b))



//**quicksort

// function quickSort(array,pivot=0,left=0,right=array.length-1) {
//   if(left < right){
//   let separatingIndex = getPivot(array,pivot,left,right);
//   quickSort(array,pivot,left,separatingIndex-1);
//   quickSort(array,separatingIndex+1,separatingIndex+1,right);
//   }
//   return array;
// }
// function getPivot(array,pivot,left,right){
//   while(left < right) {
//     do{left++}while(array[pivot]> array[left])
//     while(array[pivot] < array[right])right--;
//     if(right > left)[array[left],array[right]] = [array[right],array[left]]
//   }
//     [array[pivot],array[right]] = [array[right],array[pivot]]
//   return right;
// }


//**selection

// function selectionSort(array) {
//   let lowesetIdx=0;
//   for(let counter = 0; counter < array.length-1;counter++){
//     lowesetIdx = counter;
//     for(let j=lowesetIdx+1;j<array.length;j++){
//       if(array[j]<array[lowesetIdx])lowesetIdx=j
//     }
//     if(lowesetIdx != counter)[array[counter],array[lowesetIdx]] = [array[lowesetIdx],array[counter]]
//   }
//   return array;
// }

//***insertion

// function insertionSort(array) {
//   let temp = 0;
//   let innerCounter = 0;
//   for(let counter = 0;counter < array.length-1; counter++){
//       temp = array[counter+1];
//       innerCounter = counter +1;    
//       while(innerCounter > 0){
//         if(temp < array[innerCounter-1]){
//           array[innerCounter] = array[innerCounter-1];
//           innerCounter--;
//         }
//         else{
//           array[innerCounter] = temp;
//           break;
//         }
//       }
//     if(innerCounter == 0)array[innerCounter] = temp;
//   }
//   return array;
// }

//***merge
// function mergeSort(array) {
//   if(array.length<2) return array;
//   let mid = Math.floor(array.length/2)
//   let left = mergeSort(array.slice(0,mid));
//   let right  = mergeSort(array.slice(mid));
//   return merge(left,right);
// }
// function merge(array1,array2){
//     let index1 = 0;
//     let index2 = 0;
//     let result = [];
//     while(index1 < array1.length && index2 < array2.length){
//         if(array1[index1] < array2[index2])result.push(array1[index1++])
//         else result.push(array2[index2++])
//     }
//     while(index1 < array1.length)result.push(array1[index1++])
//     while(index2 < array2.length)result.push(array2[index2++])
//     return result;
// }





