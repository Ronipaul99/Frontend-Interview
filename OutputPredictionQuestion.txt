1. console.log(1);
setTimeout(() => {
  console.log(2);
}, 0);
Promise.resolve(3).then(res => {
    console.log(res);
    setTimeout(() => {
      console.log(7);
    }, 100);
 
    setTimeout(() => {
      console.log(8);
    }, 0);
});
setTimeout(() => {
  console.log(4);
}, 100);
setTimeout(() => {
  console.log(9);
}, 0);
 
setTimeout(() => {
  console.log(5);
}, -100);
 
console.log(6);



2. console.log(1);

setTimeout(() => {
  console.log(2);
}, 0); // Macro task

Promise.resolve(3).then(res => {
  console.log(res); // Microtask
  setTimeout(() => {
    console.log(7);
  }, 100); // Macro task
});

async function asyncFunction() {
  console.log(4); // Synchronous within async function
  const res = await Promise.resolve(5);
  console.log(res); // Microtask, after await
  setTimeout(() => {
    console.log(8);
  }, 0); // Macro task
}

asyncFunction();

setTimeout(() => {
  console.log(6);
}, 0); // Macro task

console.log(9);




function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;

}

const member = new Person('Bruce', 'Wayne');

Person.getFullName = function() {
  return `${this.firstName} ${this.lastName}`;
};

console.log(member.getFullName()); // Output

const member2 = new Person('Arista', 'Network');
console.log(member2.getFullName());



console.log('start')
const timer1 = setTimeout(() => {
  console.log('t1');
}, 1000);
const promise1 = Promise.resolve().then(() => {
    console.log('p1')
    setTimeout(() => {
      console.log('t2');
    })
  });
const timer2 = setTimeout(() => {
  console.log('t3')
}, 0)
console.log('end')
